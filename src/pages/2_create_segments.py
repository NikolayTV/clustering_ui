import re, os
import streamlit as st
import pandas as pd

# File Upload Section
st.set_page_config(page_title="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", page_icon="üè†")
st.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ & —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤")

ROWS_LIMIT = st.sidebar.text_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", value=100)
try:
    ROWS_LIMIT = int(ROWS_LIMIT)
except ValueError:
    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫")
    ROWS_LIMIT = 100



@st.cache_data
def load_data(uploaded_file):
    data_load_state = st.text('Loading data...')

    data = pd.read_csv(uploaded_file)
    if 'sender' not in data.columns.tolist():
        st.error('data should contain column: sender')
    elif 'body' not in data.columns.tolist():
        st.error('data should contain column: body')

    data_load_state.text('Loading data...done!')

    # preprocess
    data = data.dropna(subset=['sender', 'body'])

    return data

@st.cache_data
def apply_fts(filtered_data, white_list, black_list):

    if len(white_list):
        white_list_words = white_list.split(';')

        fts_pattern = '|'.join(map(re.escape, white_list_words))
        filtered_data = filtered_data[filtered_data['body'].str.contains(fts_pattern, case=False, regex=True)]
    print('1', filtered_data.shape)

    if len(black_list):
        black_list_words = black_list.split(';')
        blk_pattern = '|'.join(map(re.escape, black_list_words))
        filtered_data = filtered_data[~filtered_data['body'].str.contains(blk_pattern, case=False, regex=True)]

    print('3', filtered_data.shape)
    return filtered_data


st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv", type="csv")
if uploaded_file:
    if 'data' not in st.session_state: st.session_state['data'] = None
    if 'filtered_data' not in st.session_state: st.session_state['filtered_data'] = None
    if '–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã' not in st.session_state: st.session_state['–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'] = None

    if st.session_state['data'] is None:
        st.session_state['data'] = load_data(uploaded_file)
    
    data = st.session_state['data']
    print('asdas', data.shape)
    # LOGGING
    st.write(f"–í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è {data.shape[0]} —Å—Ç—Ä–æ—á–µ–∫ –∏ {data.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")

    show_original = st.checkbox('–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    if show_original:
        st.dataframe(data[:ROWS_LIMIT])

    # FILTRES
    st.sidebar.header("2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    st.sidebar.subheader("–ü–æ–ª–Ω–æ-—Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
    white_list = st.sidebar.text_input("–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - ;)")
    black_list = st.sidebar.text_input("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - ;)")

    # Semantic search
    semantic_query = st.sidebar.text_input("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å–º—ã—Å–ª—É")
    semantic_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏", 0.0, 1.0, 0.7)


    # Apply Filters Button
    if st.sidebar.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã") or st.session_state['–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã']:
        st.session_state['–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'] = True
        filtered_data = st.session_state['data'].copy()
        print('filtered_data adsa', filtered_data.shape)
        
        filtered_data = apply_fts(filtered_data, white_list, black_list)
        st.write(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ full-text-search:", filtered_data.shape)

        if semantic_query:
            st.write(f"Applying semantic search with query: {semantic_query} and semantic_threshold: {semantic_threshold}")
            filtered_data = filtered_data
        

        st.write(f"–í –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è {filtered_data.shape[0]} —Å—Ç—Ä–æ–∫")
        st.dataframe(filtered_data[:ROWS_LIMIT])
        st.session_state['filtered_data'] = filtered_data


    # SAVE
    save_path = st.sidebar.text_input("–ü—É—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", value="saved_data/test/sample.csv")
    if st.sidebar.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") and st.session_state['data'] is not None:
        filtered_data = st.session_state['filtered_data']
        if filtered_data.shape[0] == 0:
            st.write(f"–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {filtered_data.shape[0]} —Å—Ç—Ä–æ—á–µ–∫")

        else:
            directory = "/".join(save_path.split('/')[:-1])
            filename = save_path.split('/')[-1]
            if not os.path.exists(directory):
                os.makedirs(directory)

            filepath = os.path.join(directory, filename)
            filtered_data.to_csv(filepath, index=False)
            st.sidebar.success(f"–î–∞–Ω–Ω–≤—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")


